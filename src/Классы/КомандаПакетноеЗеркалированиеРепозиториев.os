///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс
#Использовать 1commands
#Использовать json
#Использовать logos

Перем Лог;

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Пакетное Зеркалирование репозиториев git на другой сервер");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКФайлуНастроек", "Файл со спискомнастроек зеркалирования");
  	Парсер.ДобавитьКоманду(ОписаниеКоманды);

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

    Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы()); 

	ПакетноЗеркалироватьРепозитории( ПараметрыКоманды["ПутьКФайлуНастроек"]);
	
КонецФункции

Функция ПакетноЗеркалироватьРепозитории(ПутьКФайлуНастроек) Экспорт

	Менеджер = Новый КомандаЗеркалироватьРепозиторий;
	

	ТекстовыеДанныеJSON = ПрочитатьДанныеИзФайла(ПутьКФайлуНастроек);
	ПарсерJSON = Новый ПарсерJSON;
	ТекущиеНастройки = ПарсерJSON.ПрочитатьJSON(ТекстовыеДанныеJSON);
	
	Репозитории  = ТекущиеНастройки["Репозитории"];
	
	Для Каждого Репо из Репозитории Цикл
		// Обход по списку репозиториев
		
		Лог.Информация(СтрШаблон(">> Начало зеркалирования: %1", Репо["Наименование"]));

		URLРепозитория = Репо["URLРепозитория"];
		МиссивЗеркал =  Репо["Зеркала"];
		
		Для Каждого Зеркало Из МиссивЗеркал Цикл

			Лог.Информация(СтрШаблон(">> Обрабатываю зеркала: %1", Зеркало["Наименование"]));
	
			URLНазначения = Зеркало["URLРепозитория"];
			Наименование = Зеркало["Наименование"];
			ДополнительныеЗаголовки = Зеркало["ДополнительныеЗаголовки"];
			
			КодВозврата = Менеджер.ЗеркалироватьРепозиторий(URLРепозитория, URLНазначения, ДополнительныеЗаголовки);
				
			Если Не КодВозврата = 0 Тогда
				Лог.Информация("Не удалось зеркалировать репо: " + Репо["Наименование"]);
			КонецЕсли;

		КонецЦикла

	КонецЦикла;

	Возврат 0;

КонецФункции

Функция  ПрочитатьДанныеИзФайла(Знач ПутькФайлу)
	
	ТекстовыеДанные = "";

	Попытка
		ТекстовойДокумент = Новый ТекстовыйДокумент;
		ТекстовойДокумент.Прочитать(ПутькФайлу);
		ТекстовыеДанные = ТекстовойДокумент.ПолучитьТекст();
	Исключение
		ОсвободитьОбъект(ТекстовойДокумент);
		ВызватьИсключение;
	КонецПопытки;

	Возврат ТекстовыеДанные;


КонецФункции
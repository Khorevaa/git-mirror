#Использовать asserts
#Использовать files-common
#Использовать "../src"

Функция ПолучитьСписокТестов(Тестирование) Экспорт
    
    Список = Новый Массив;
   	Список.Добавить("Тест_ДолженПроверитьЗеркапированиеРепозитория");
   	Список.Добавить("Тест_ДолженПроверитьПакетноеЗеркалированиеРепозиториев");
       
    Возврат Список;
    
КонецФункции


Процедура ПослеЗапускаТеста() Экспорт
    //ВременныеФайлы.Удалить();
КонецПроцедуры

Процедура Тест_ДолженПроверитьЗеркапированиеРепозитория() Экспорт

	ИсходныйРепо = ПодготовитьТестовыйРепозиторий();
	
	ТестовыйРепо = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "clone-repo");
	
	УдаленныйРепо = ВременныеФайлы.СоздатьКаталог();
	ФС.КопироватьСодержимоеКаталога(ТестовыйРепо, УдаленныйРепо);

  	Команда = Новый КомандаЗеркалироватьРепозиторий();
  	
	Попытка
        РезультатВыполнения = Команда.ЗеркалироватьРепозиторий(ИсходныйРепо,
										УдаленныйРепо,
										"github");

	    //Ожидаем.Что(ОкружениеСборки.ПропуститьВыполенениеВсехПоследующих()=Ложь, "Установлена переменная среды, необходимость синхронизации"); 
    	
		Если НЕ РезультатВыполнения = 0 Тогда
			ВызватьИсключение "Выполнение функции зеркалирования репозитория не удалось";
		КонецЕслИ;	

	Исключение
		 ПослеЗапускаТеста();	
         ВызватьИсключение;
    КонецПопытки;

КонецПроцедуры


Процедура Тест_ДолженПроверитьПакетноеЗеркалированиеРепозиториев() Экспорт

	ИсходныйРепо = ПодготовитьТестовыйРепозиторий();
			
	ФайлНастроек = ПодготовитьФайлНастроек(ИсходныйРепо);
  	Команда = Новый КомандаПакетноеЗеркалированиеРепозиториев();
  	
	Попытка
        РезультатВыполнения = Команда.ПакетноЗеркалироватьРепозитории(ФайлНастроек);

	    //Ожидаем.Что(ОкружениеСборки.ПропуститьВыполенениеВсехПоследующих()=Ложь, "Установлена переменная среды, необходимость синхронизации"); 
    	
		Если НЕ РезультатВыполнения = 0 Тогда
			ВызватьИсключение "Выполнение функции зеркалирования репозитория не удалось";
		КонецЕслИ;	

	Исключение
		 ПослеЗапускаТеста();	
         ВызватьИсключение;
    КонецПопытки;

КонецПроцедуры




Функция ПодготовитьТестовыйРепозиторий()

	РабочийКаталог = ВременныеФайлы.СоздатьКаталог();
	
	ТестовыйРепо = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "test-repo");
	
	ФС.КопироватьСодержимоеКаталога(ТестовыйРепо, РабочийКаталог);
	
	Возврат РабочийКаталог;

КонецФункции


Функция ПодготовитьФайлНастроек(URLРепозитория)

	ШаблонныйТекст = "{
		|""Репозитории"": [
		|		{
		|			""Наименование"": ""Тест 1"",
		|			""URLРепозитория"": ""%1"",
		|			""Зеркала"": [
		|				{
		|					""Наименование"": ""mirror1-test"",
		|					""URLРепозитория"": ""%2"",
		|					""ДополнительныеЗаголовки"": ""test""
		|				},
		|				{
		|					""Наименование"": ""mirror2-test"",
		|					""URLРепозитория"": ""%3"",
		|					""ДополнительныеЗаголовки"": ""test2""
		|				}
		|			]
		|		}
		|	]
		|}";
	
	ФайлНастроек = ВременныеФайлы.НовоеИмяФайла();

	Каталогmirror1 = ВременныеФайлы.СоздатьКаталог();	
	Каталогmirror2 = ВременныеФайлы.СоздатьКаталог();
	
	ТестовыйРепо = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "clone-repo");
	
	ФС.КопироватьСодержимоеКаталога(ТестовыйРепо, Каталогmirror1);
	ФС.КопироватьСодержимоеКаталога(ТестовыйРепо, Каталогmirror2);


	ЗаписатьДанныеВФайл(СтрШаблон(ШаблонныйТекст,URLРепозитория,Каталогmirror1,Каталогmirror2), ФайлНастроек);

	
	Возврат ФайлНастроек;

КонецФункции

Процедура ЗаписатьДанныеВФайл(Знач ТекстовыеДанные, Знач ПутькФайлу)
	
	Попытка
		ТекстовойДокумент = Новый ТекстовыйДокумент;
		ТекстовойДокумент.УстановитьТекст(ТекстовыеДанные);
		ТекстовойДокумент.Записать(ПутькФайлу,"utf-8");
	
	Исключение
		ОсвободитьОбъект(ТекстовойДокумент);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры